Do stworzenia interejsu uzytkownika skorzystalem z frameworku jezyka javascript o nazwie Svelte ( konkretnie SvelteKit, natomiast nie uzylem finalnie zadnej z jego extra funckjonalnosci ). Svelte jest alternatywna dla dominujacego rynek reacta, ktora obecnie stopniowo coraz mocniej zyskuje na popularnosci, miedzy innymi na zmiany, ktore zostaly wprowadzone w wersji 5 - nasz projekt korzysta wlasnie ze svelte w wersji 5. Svelte 5 to framework javascript, ktory opiera sie na tworzeniu komponentow, tak samo jak react, tylko inaczej niz react, jest on kompilowany, to znaczy, ze kod svelte piszemy w plikach o specjalnym rozszerzeniu .svelte ( zeby utworzyc komponent ) albo .svelte.ts/js ( zeby wyekstraktowac logike do osobnego pliku, mega uzyteczna sprawa i tez to mamy w aplikacji ). Fakt tego, iz svelte jest kompilowany, umozliwia robienie w nim rzeczy niemozliwych z punktu widzenia samego javascriptu, identycznie jak we vue, ale inaczej niz w reactcie.

Dodatkowo, do szybkiego scaffoldingu aplikacji skorzystalem z shadcn - popularne narzedzie do generowania gotowych komponentow, ktore dostepne jest dla wiekszosci wspolcesnych frameworkow javascripta ( react, vue, svelte, solid ). Shadcn to nie jest typowa biblioteka komponentow tak jak przykladowo MaterialUI, tylko narzedzie umozliwiajaca za pomoca terminala generowanie pojedynczych komponentow takich jak Input czy Box, ktore sa out of the box ostylowane z wykorzystaniem TailwindCSS - rowniez bardzo wspolczesnie popularnego narzedzia do szybkiego tworzenia stylow.

Ostatnim ciekawym narzedziem, ktorego uzylem jest TanstackQuery w wersji dla svelte. TanstackQuery to kolejne wspolczenie namietnie uzywane narzedzie przez programistow frontu, poniewaz posiada swoj port dla wiekszosci najpopularniejszych frameworkow JS ( react, vue, svelte, angular, solid ). TanstackQuery ( nie sam tanstack!!! bo tanstack posiada wiele innych produktow i zawsze trzeba odwolywac sie do 2 czlonow, sa jeszcze TanstackRouter, TanstackTable, TanstackForm ... ), Tanstack query to narzedzie ktore bardzo bardzo bardzo ulatwia wykonywanie requestow do api z poziomu aplikacji frontendowych, poniewaz w latwy sposob umozliwia kontrolowanych wykonywania zapytan ( queries ) i mutacji ( mutations ). W przypadku naszej aplikacji, tanstack query uzyty zostal tylko raz, poniewaz wykonujemy jedego requesta ( konkretnie mutacje ) do naszego API. TanstackQuery daje kontrole nad rzeczami takimi jak status wykonywanej mutacji, czy jest ona w trakcie, czy zakonczyla sie pomyslnie, czy bledem, co wykonac w przypadku sukcesu, a co w przypadku niepowodzenia i inne takie fajne zeczy.

I na koncu typescript, no typescript zamaist javascripta, svelte 5 jest napisany pod ts, ts to standard i nie ma powodu, zeby go nie uzywac. Wykorzystalem TS do utrzymania bardziej bezpiecznego kodu, ze wzledu na mechanizmy na biezaco weryfikujace poprawnosci typow, na ktorych nasza aplikacja operuje

linki dla ciekawskich
- svelte 5 docs - https://svelte.dev/docs
- tanstack query svelte - https://tanstack.com/query/v5/docs/framework/svelte/overview
- shadcn svelte - https://www.shadcn-svelte.com/
- tailwind css - https://tailwindcss.com/docs

jako package manager apliakcji uzylem pnpm, a nie standardowego npm, poniewaz pnpm duzo lepiej zarzadza zainstalowanymi pakietami na komputerze, poniewaz on sobie cachuje informacje o tym, co mamy na komputerze zainstalowane i nie pobiera z neta za kazdym razem wszystkich pakietow, tylko zaciaga je z innych naszych projektow. skraca to czas instalacji pakietow z kilku minut ( przy slabym internecie ) do kilku sekund

